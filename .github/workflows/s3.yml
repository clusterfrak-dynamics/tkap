name: 'terraform:env:demo:s3'

on:
  push:
    branches:
    - master
    paths:
    - 'terraform/live/demo/**'
  pull_request:

jobs:
  terraform:
    name: 'terraform:env:demo'
    runs-on: ubuntu-latest
    steps:
    - name: 'slack:start'
      if: success()
      id: slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: clusterfrak-dynamics
        status: STARTING
        color: warning

    - name: checkout
      uses: actions/checkout@v2

    - name: 'asdf:install'
      uses: asdf-vm/actions/install@v1.0.0

    - name: 'terraform:setup'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: true
        terraform_version: 0.13.3
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 'terraform:fmt:kapsule'
      run: terraform fmt -check
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1

    - name: 'terraform:init:kapsule'
      run: terraform init
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1

    - name: 'terraform:plan:kapsule'
      run: terraform plan
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1

    - name: 'terraform:apply:kapsule'
      run: terraform apply -auto-approve
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1
      if: github.ref == 'refs/heads/master'

    - name: 'terraform:destroy:kapsule'
      run: terraform destroy -auto-approve
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      if: "!contains(github.event.head_commit.message, 'ci keep') && github.ref == 'refs/heads/master'"
      continue-on-error: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1

    - name: 'terraform:destroy:kapsule:cleanup-stale-state'
      run: terraform state list 2>/dev/null | xargs terraform state rm
      working-directory: terraform/live/demo/fr-par/kapsule-s3
      continue-on-error: true
      if: "!contains(github.event.head_commit.message, 'ci keep') && github.ref == 'refs/heads/master'"

    - name: 'slack:success'
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: clusterfrak-dynamics
        status: SUCCESS
        color: good

    - name: 'slack:failure'
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: clusterfrak-dynamics
        status: failure
        color: danger
