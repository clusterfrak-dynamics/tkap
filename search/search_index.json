{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tKAP \u00b6 tKAP is a set of Terraform modules designed to get you everything you need to run a production Kapsule cluster on Scaleway Element. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box. Terraform \u00b6 Terraform implementation is available in the terraform folder. Requirements \u00b6 Terraform direnv : available in every Linux distribution, do not forget the shell hook installation tfenv scalway-cli configured for your scaleway account A Scaleway object storage bucket to store Terraform state files (Optional) A scaleway DNS zone if you want to have dynamic DNS QuickStart \u00b6 This repository is a template that can used to deploy this repository in your own Github namespace. Terraform configuration is done inside the live folder. Create a credentials.sh file that WILL NOT be commited to git with your credentials (it is possible to use other means of authentication like aws profile for the S3 credentials and scaleway cli configuration file for scaleway provider, keep in mind that no matter how you do it, you need the AWS credential for S3 backend and scaleway credentials loaded): export SCW_ACCESS_KEY = SCW_ACCESS_KEY export SCW_SECRET_KEY = SCW_SECRET_KEY export SCW_DEFAULT_ORGANIZATION_ID = SCW_DEFAULT_ORGANIZATION_ID export SCW_DEFAULT_PROJECT_ID = SCW_DEFAULT_PROJECT_ID export AWS_ACCESS_KEY_ID = $SCW_ACCESS_KEY export AWS_SECRET_ACCESS_KEY = $SCW_SECRET_KEY source the credentials.sh file source credentials.sh Add your Scaleway object storage bucket name in ./terraform/live/shared/backend.tf terraform { backend \"s3\" { bucket = \"tkap-terraform-remote-state\" region = \"fr-par\" endpoint = \"https://s3.fr-par.scw.cloud\" skip_region_validation = true skip_credentials_validation = true } } Edit the ./terraform/live/global_values.yaml to suit your needs: --- default_domain_name : scw.particule.cloud prefix : pio project : tkap tf_state_bucket_region : fr-par tf_state_bucket_name : tkap-terraform-remote-state Copy the demo environment: cp -ar demo-s3 production tree production \uf115 . \u251c\u2500\u2500 \uf481 env_tags.yaml \u2514\u2500\u2500 \uf115 fr-par \u251c\u2500\u2500 \uf115 clusters \u2502 \u2514\u2500\u2500 \uf115 full \u2502 \u251c\u2500\u2500 \uf481 cluster_values.yaml \u2502 \u251c\u2500\u2500 \uf115 kapsule \u2502 \u2502 \u251c\u2500\u2500 \uf016 backend.tf -> ../../../../../shared/backend.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 main.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 scw-provider.tf -> ../../../../../shared/scw-provider.tf \u2502 \u2502 \u2514\u2500\u2500 \uf016 versions.tf \u2502 \u2514\u2500\u2500 \uf115 kapsule-addons \u2502 \u251c\u2500\u2500 \uf016 backend.tf -> ../../../../../shared/backend.tf \u2502 \u251c\u2500\u2500 \uf016 data.tf \u2502 \u251c\u2500\u2500 \uf016 locals.tf -> ../../../../../shared/locals.tf \u2502 \u251c\u2500\u2500 \uf016 main.tf \u2502 \u2514\u2500\u2500 \uf016 versions.tf \u2514\u2500\u2500 \uf481 region_values.yaml Add environment name in env_tags.yaml to match your environment Inside kapsule folder run: terraform init terraform plan terrafrom apply To get the kubeconfig file for the cluster: terraform output -raw kubeconfig Inside kapsule-addons run: terraform init terraform plan terrafrom apply Main purposes \u00b6 The main goal of this project is to glue together commonly used tooling with Kubernetes/Kapsule and to get from a scaleway account to a production cluster with everything you need without any manual configuration. What you get \u00b6 A production cluster all defined in IaaC with Terraform: Kapsule cluster base on terraform-scaleway-kapsule Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Everything is tied together with Terraform and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different Scaleway accounts and/or regions for different environments.","title":"Overview"},{"location":"#tkap","text":"tKAP is a set of Terraform modules designed to get you everything you need to run a production Kapsule cluster on Scaleway Element. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box.","title":"tKAP"},{"location":"#terraform","text":"Terraform implementation is available in the terraform folder.","title":"Terraform"},{"location":"#requirements","text":"Terraform direnv : available in every Linux distribution, do not forget the shell hook installation tfenv scalway-cli configured for your scaleway account A Scaleway object storage bucket to store Terraform state files (Optional) A scaleway DNS zone if you want to have dynamic DNS","title":"Requirements"},{"location":"#quickstart","text":"This repository is a template that can used to deploy this repository in your own Github namespace. Terraform configuration is done inside the live folder. Create a credentials.sh file that WILL NOT be commited to git with your credentials (it is possible to use other means of authentication like aws profile for the S3 credentials and scaleway cli configuration file for scaleway provider, keep in mind that no matter how you do it, you need the AWS credential for S3 backend and scaleway credentials loaded): export SCW_ACCESS_KEY = SCW_ACCESS_KEY export SCW_SECRET_KEY = SCW_SECRET_KEY export SCW_DEFAULT_ORGANIZATION_ID = SCW_DEFAULT_ORGANIZATION_ID export SCW_DEFAULT_PROJECT_ID = SCW_DEFAULT_PROJECT_ID export AWS_ACCESS_KEY_ID = $SCW_ACCESS_KEY export AWS_SECRET_ACCESS_KEY = $SCW_SECRET_KEY source the credentials.sh file source credentials.sh Add your Scaleway object storage bucket name in ./terraform/live/shared/backend.tf terraform { backend \"s3\" { bucket = \"tkap-terraform-remote-state\" region = \"fr-par\" endpoint = \"https://s3.fr-par.scw.cloud\" skip_region_validation = true skip_credentials_validation = true } } Edit the ./terraform/live/global_values.yaml to suit your needs: --- default_domain_name : scw.particule.cloud prefix : pio project : tkap tf_state_bucket_region : fr-par tf_state_bucket_name : tkap-terraform-remote-state Copy the demo environment: cp -ar demo-s3 production tree production \uf115 . \u251c\u2500\u2500 \uf481 env_tags.yaml \u2514\u2500\u2500 \uf115 fr-par \u251c\u2500\u2500 \uf115 clusters \u2502 \u2514\u2500\u2500 \uf115 full \u2502 \u251c\u2500\u2500 \uf481 cluster_values.yaml \u2502 \u251c\u2500\u2500 \uf115 kapsule \u2502 \u2502 \u251c\u2500\u2500 \uf016 backend.tf -> ../../../../../shared/backend.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 main.tf \u2502 \u2502 \u251c\u2500\u2500 \uf016 scw-provider.tf -> ../../../../../shared/scw-provider.tf \u2502 \u2502 \u2514\u2500\u2500 \uf016 versions.tf \u2502 \u2514\u2500\u2500 \uf115 kapsule-addons \u2502 \u251c\u2500\u2500 \uf016 backend.tf -> ../../../../../shared/backend.tf \u2502 \u251c\u2500\u2500 \uf016 data.tf \u2502 \u251c\u2500\u2500 \uf016 locals.tf -> ../../../../../shared/locals.tf \u2502 \u251c\u2500\u2500 \uf016 main.tf \u2502 \u2514\u2500\u2500 \uf016 versions.tf \u2514\u2500\u2500 \uf481 region_values.yaml Add environment name in env_tags.yaml to match your environment Inside kapsule folder run: terraform init terraform plan terrafrom apply To get the kubeconfig file for the cluster: terraform output -raw kubeconfig Inside kapsule-addons run: terraform init terraform plan terrafrom apply","title":"QuickStart"},{"location":"#main-purposes","text":"The main goal of this project is to glue together commonly used tooling with Kubernetes/Kapsule and to get from a scaleway account to a production cluster with everything you need without any manual configuration.","title":"Main purposes"},{"location":"#what-you-get","text":"A production cluster all defined in IaaC with Terraform: Kapsule cluster base on terraform-scaleway-kapsule Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Everything is tied together with Terraform and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different Scaleway accounts and/or regions for different environments.","title":"What you get"}]}